{"version":3,"file":"index.umd.js","sources":["../src/components/Tree/Icons/Expand.tsx","../src/components/Tree/Icons/Collapse.tsx","../src/components/Tree/Branch.tsx","../src/components/Tree/Leave.tsx","../src/components/Tree/hooks/hooks.tsx","../src/components/Tree/Tree.tsx"],"sourcesContent":["const Expand: React.FC = () => {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      fill=\"none\"\r\n      viewBox=\"0 0 24 24\"\r\n      strokeWidth={1.5}\r\n      stroke=\"currentColor\"\r\n      className=\"size-4\"\r\n    >\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        d=\"m8.25 4.5 7.5 7.5-7.5 7.5\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default Expand;\r\n","const Collapse: React.FC = () => {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      fill=\"none\"\r\n      viewBox=\"0 0 24 24\"\r\n      strokeWidth={1.5}\r\n      stroke=\"currentColor\"\r\n      className=\"size-4\"\r\n    >\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        d=\"m19.5 8.25-7.5 7.5-7.5-7.5\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default Collapse;\r\n","import React, { useCallback, useState } from \"react\";\r\nimport Tree from \"./Tree\";\r\nimport { BranchCustomProps, LeaveCustomProps, objectType } from \"./types/types\";\r\nimport Expand from \"./Icons/Expand\";\r\nimport Collapse from \"./Icons/Collapse\";\r\n\r\ninterface BranchProps {\r\n  name: string;\r\n  root: objectType;\r\n  customProps?: BranchCustomProps;\r\n  leaveProps?: LeaveCustomProps;\r\n}\r\n\r\nconst Branch: React.FC<BranchProps> = ({\r\n  name,\r\n  root,\r\n  customProps = {},\r\n  leaveProps,\r\n}: BranchProps) => {\r\n  const {\r\n    expandIcon = <Expand />,\r\n    collapseIcon = <Collapse />,\r\n    defaultExpanded = true,\r\n    branchHeadRenderer,\r\n    indentation,\r\n    hideDepthLines = false,\r\n  } = customProps;\r\n\r\n  const [isOpen, setIsOpen] = useState<boolean>(defaultExpanded);\r\n\r\n  const toggleOpen = useCallback(() => {\r\n    setIsOpen((prev) => !prev);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-start justify-start\">\r\n      <button type=\"button\" onClick={toggleOpen} className=\"name\">\r\n        {branchHeadRenderer?.(name, isOpen) ?? (\r\n          <div className=\"flex justify-start items-center gap-2\">\r\n            <div>{isOpen ? collapseIcon : expandIcon}</div>\r\n            <div className=\"name\">{name}</div>\r\n          </div>\r\n        )}\r\n      </button>\r\n      <div\r\n        className={`content pl-6 ${!isOpen && \"hidden\"} ${\r\n          !hideDepthLines ? \"border-l\" : \"\"\r\n        } border-l-slate-300`}\r\n        style={indentation ? { paddingLeft: indentation + \"px\" } : undefined}\r\n      >\r\n        <Tree root={root} branchProps={customProps} leaveProps={leaveProps} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Branch;\r\n","import React from \"react\";\r\nimport { primitive, LeaveCustomProps } from \"./types/types\";\r\n\r\ninterface LeaveProps {\r\n  name: string;\r\n  value: primitive;\r\n  customProps?: LeaveCustomProps;\r\n}\r\n\r\nconst Leave: React.FC<LeaveProps> = ({\r\n  name,\r\n  value,\r\n  customProps = {},\r\n}: LeaveProps) => {\r\n  const { hideKeys = false, leaveRenderer } = customProps;\r\n\r\n  return leaveRenderer ? (\r\n    leaveRenderer(name, value)\r\n  ) : (\r\n    <div className=\"flex items-center justify-start gap-2\">\r\n      {!hideKeys && <div className=\"stem italic text-blue-800\">{name} :</div>}\r\n      <div className=\"leave\">{value}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Leave;\r\n","import { useCallback, useMemo } from \"react\";\r\nimport {\r\n  BranchCustomProps,\r\n  LeaveCustomProps,\r\n  objectType,\r\n  primitive,\r\n} from \"../types/types\";\r\nimport Branch from \"../Branch\";\r\nimport Leave from \"../Leave\";\r\n\r\nexport const useTree = (\r\n  root: objectType,\r\n  branchProps?: BranchCustomProps,\r\n  leaveProps?: LeaveCustomProps\r\n) => {\r\n  const tree = useMemo(\r\n    () =>\r\n      Object.entries(root).map((i, idx) => {\r\n        if (typeof i[1] === \"object\") {\r\n          let val = objectify(i[1]);\r\n\r\n          return (\r\n            <Branch\r\n              customProps={branchProps}\r\n              leaveProps={leaveProps}\r\n              key={idx + i[0]}\r\n              name={i[0]}\r\n              root={val as objectType}\r\n            />\r\n          );\r\n        } else\r\n          return (\r\n            <Leave\r\n              customProps={leaveProps}\r\n              key={idx + i[0]}\r\n              name={i[0]}\r\n              value={i[1] as primitive}\r\n            />\r\n          );\r\n      }),\r\n    [root]\r\n  );\r\n\r\n  const renderTree = useCallback(() => {\r\n    return <div className=\"tree\">{tree}</div>;\r\n  }, [tree]);\r\n\r\n  return renderTree;\r\n};\r\n\r\nconst objectifyArr = (list: unknown[]) => Object.assign({}, list);\r\n\r\nexport const useJsonParser = (root: objectType | string) => {\r\n  if (root === null)\r\n    return { Error: \"Please pass valid JavaScript object or JSON as an input\" };\r\n\r\n  if (typeof root === \"object\") {\r\n    return root;\r\n  }\r\n\r\n  if (typeof root === \"string\") {\r\n    try {\r\n      const result = JSON.parse(root);\r\n      return result;\r\n    } catch (_e) {\r\n      return { Error: \"Invalid JSON !\" };\r\n    }\r\n  }\r\n\r\n  return { Error: \"Please pass valid JavaScript object or JSON as an input\" };\r\n};\r\n\r\nconst objectify = (obj: object | null) => {\r\n  if (Array.isArray(obj)) return objectifyArr(obj as unknown[]);\r\n\r\n  if (obj instanceof Map) return Object.fromEntries(obj);\r\n\r\n  if (obj instanceof Set) return objectifyArr([...obj]);\r\n\r\n  return obj;\r\n};\r\n","import React from \"react\";\r\nimport { useJsonParser, useTree } from \"./hooks/hooks\";\r\nimport { TreeProps } from \"./types/types\";\r\nimport \"./style.css\";\r\nimport \"node_modules/react-json-as-tree/dist/style.css\";\r\n\r\nconst Tree: React.FC<TreeProps> = ({\r\n  root,\r\n  branchProps,\r\n  leaveProps,\r\n}: TreeProps) => {\r\n  const parsed = useJsonParser(root);\r\n\r\n  const renderTree = useTree(parsed, branchProps, leaveProps);\r\n\r\n  return renderTree();\r\n};\r\n\r\nexport default Tree;\r\n"],"names":["Expand","jsx","Collapse","Branch","name","root","customProps","leaveProps","expandIcon","collapseIcon","defaultExpanded","branchHeadRenderer","indentation","hideDepthLines","isOpen","setIsOpen","useState","toggleOpen","useCallback","prev","jsxs","Tree","Leave","value","hideKeys","leaveRenderer","useTree","branchProps","tree","useMemo","i","idx","val","objectify","objectifyArr","list","useJsonParser","obj","parsed"],"mappings":"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"}
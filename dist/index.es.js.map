{"version":3,"file":"index.es.js","sources":["../src/components/Tree/Icons/Expand.tsx","../src/components/Tree/Icons/Collapse.tsx","../src/components/Tree/Branch.tsx","../src/components/Tree/Leave.tsx","../src/components/Tree/hooks/hooks.tsx","../src/components/Tree/Tree.tsx"],"sourcesContent":["const Expand: React.FC = () => {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      fill=\"none\"\r\n      viewBox=\"0 0 24 24\"\r\n      strokeWidth={1.5}\r\n      stroke=\"currentColor\"\r\n      className=\"size-4\"\r\n    >\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        d=\"m8.25 4.5 7.5 7.5-7.5 7.5\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default Expand;\r\n","const Collapse: React.FC = () => {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      fill=\"none\"\r\n      viewBox=\"0 0 24 24\"\r\n      strokeWidth={1.5}\r\n      stroke=\"currentColor\"\r\n      className=\"size-4\"\r\n    >\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        d=\"m19.5 8.25-7.5 7.5-7.5-7.5\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default Collapse;\r\n","import React, { useCallback, useState } from \"react\";\r\nimport Tree from \"./Tree\";\r\nimport { BranchCustomProps, LeaveCustomProps, objectType } from \"./types/types\";\r\nimport Expand from \"./Icons/Expand\";\r\nimport Collapse from \"./Icons/Collapse\";\r\n\r\ninterface BranchProps {\r\n  name: string;\r\n  root: objectType;\r\n  customProps?: BranchCustomProps;\r\n  leaveProps?: LeaveCustomProps;\r\n}\r\n\r\nconst Branch: React.FC<BranchProps> = ({\r\n  name,\r\n  root,\r\n  customProps = {},\r\n  leaveProps,\r\n}: BranchProps) => {\r\n  const {\r\n    expandIcon = <Expand />,\r\n    collapseIcon = <Collapse />,\r\n    defaultExpanded = true,\r\n    branchHeadRenderer,\r\n    indentation,\r\n    hideDepthLines = false,\r\n    onBranchHeadClick,\r\n  } = customProps;\r\n\r\n  const [isOpen, setIsOpen] = useState<boolean>(defaultExpanded);\r\n\r\n  const toggleOpen = useCallback(() => {\r\n    setIsOpen((prev) => !prev);\r\n    onBranchHeadClick?.(name, isOpen, root);\r\n  }, [name, isOpen, root, onBranchHeadClick]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-start justify-start\">\r\n      <button type=\"button\" onClick={toggleOpen} className=\"name\">\r\n        {branchHeadRenderer?.(name, isOpen, root) ?? (\r\n          <div className=\"flex justify-start items-center gap-2\">\r\n            <div>{isOpen ? collapseIcon : expandIcon}</div>\r\n            <div className=\"name\">{name}</div>\r\n          </div>\r\n        )}\r\n      </button>\r\n      <div\r\n        className={`content pl-6 ${!isOpen && \"hidden\"} ${\r\n          !hideDepthLines ? \"border-l\" : \"\"\r\n        } border-l-slate-300`}\r\n        style={indentation ? { paddingLeft: indentation + \"px\" } : undefined}\r\n      >\r\n        <Tree root={root} branchProps={customProps} leaveProps={leaveProps} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Branch;\r\n","import React from \"react\";\r\nimport { primitive, LeaveCustomProps } from \"./types/types\";\r\n\r\ninterface LeaveProps {\r\n  name: string;\r\n  value: primitive;\r\n  customProps?: LeaveCustomProps;\r\n}\r\n\r\nconst Leave: React.FC<LeaveProps> = ({\r\n  name,\r\n  value,\r\n  customProps = {},\r\n}: LeaveProps) => {\r\n  const { hideKeys = false, leaveRenderer, onLeaveClick } = customProps;\r\n\r\n  return leaveRenderer ? (\r\n    leaveRenderer(name, value)\r\n  ) : (\r\n    <button\r\n      onClick={() => onLeaveClick?.(name, value)}\r\n      className=\"flex items-center justify-start gap-2\"\r\n    >\r\n      {!hideKeys && <div className=\"stem italic text-blue-800\">{name} :</div>}\r\n      <div className=\"leave\">{value}</div>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Leave;\r\n","import { useCallback, useMemo } from \"react\";\r\nimport {\r\n  BranchCustomProps,\r\n  LeaveCustomProps,\r\n  objectType,\r\n  primitive,\r\n} from \"../types/types\";\r\nimport Branch from \"../Branch\";\r\nimport Leave from \"../Leave\";\r\n\r\nexport const useTree = (\r\n  root: objectType,\r\n  branchProps?: BranchCustomProps,\r\n  leaveProps?: LeaveCustomProps\r\n) => {\r\n  const tree = useMemo(\r\n    () =>\r\n      Object.entries(root).map((i, idx) => {\r\n        if (typeof i[1] === \"object\") {\r\n          let val = objectify(i[1]);\r\n\r\n          return (\r\n            <Branch\r\n              customProps={branchProps}\r\n              leaveProps={leaveProps}\r\n              key={idx + i[0]}\r\n              name={i[0]}\r\n              root={val as objectType}\r\n            />\r\n          );\r\n        } else\r\n          return (\r\n            <Leave\r\n              customProps={leaveProps}\r\n              key={idx + i[0]}\r\n              name={i[0]}\r\n              value={i[1] as primitive}\r\n            />\r\n          );\r\n      }),\r\n    [root]\r\n  );\r\n\r\n  const renderTree = useCallback(() => {\r\n    return <div className=\"tree\">{tree}</div>;\r\n  }, [tree]);\r\n\r\n  return renderTree;\r\n};\r\n\r\nconst objectifyArr = (list: unknown[]) => Object.assign({}, list);\r\n\r\nexport const useJsonParser = (root: objectType | string) => {\r\n  if (root === null)\r\n    return { Error: \"Please pass valid JavaScript object or JSON as an input\" };\r\n\r\n  if (typeof root === \"object\") {\r\n    return root;\r\n  }\r\n\r\n  if (typeof root === \"string\") {\r\n    try {\r\n      const result = JSON.parse(root);\r\n      return result;\r\n    } catch (_e) {\r\n      return { Error: \"Invalid JSON !\" };\r\n    }\r\n  }\r\n\r\n  return { Error: \"Please pass valid JavaScript object or JSON as an input\" };\r\n};\r\n\r\nconst objectify = (obj: object | null) => {\r\n  if (Array.isArray(obj)) return objectifyArr(obj as unknown[]);\r\n\r\n  if (obj instanceof Map) return Object.fromEntries(obj);\r\n\r\n  if (obj instanceof Set) return objectifyArr([...obj]);\r\n\r\n  return obj;\r\n};\r\n","import React from \"react\";\r\nimport { useJsonParser, useTree } from \"./hooks/hooks\";\r\nimport { TreeProps } from \"./types/types\";\r\nimport \"./style.css\";\r\nimport \"node_modules/react-json-as-tree/dist/style.css\";\r\n\r\nconst Tree: React.FC<TreeProps> = ({\r\n  root,\r\n  branchProps,\r\n  leaveProps,\r\n}: TreeProps) => {\r\n  const parsed = useJsonParser(root);\r\n\r\n  const renderTree = useTree(parsed, branchProps, leaveProps);\r\n\r\n  return renderTree();\r\n};\r\n\r\nexport default Tree;\r\n"],"names":["Expand","jsx","Collapse","Branch","name","root","customProps","leaveProps","expandIcon","collapseIcon","defaultExpanded","branchHeadRenderer","indentation","hideDepthLines","onBranchHeadClick","isOpen","setIsOpen","useState","toggleOpen","useCallback","prev","jsxs","Tree","Leave","value","hideKeys","leaveRenderer","onLeaveClick","useTree","branchProps","tree","useMemo","i","idx","val","objectify","objectifyArr","list","useJsonParser","obj","parsed"],"mappings":"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"}